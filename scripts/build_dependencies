#!/bin/bash

cd $(dirname "$0")/..

mkdir -p install
mkdir -p 3rdparty
cd 3rdparty

git config --global advice.detachedHead false

echo "--- CLONING ARGAGG ---"
git clone --depth 1 https://github.com/vietjtnguyen/argagg.git > /dev/null

echo "--- CLONING LIBNOISE2D ---"
git clone --depth 1 https://github.com/planeworld/libnoise2d.git > /dev/null

echo "--- CLONING BOX2D ---"
git clone --branch v2.4.1 --depth 1 https://github.com/erincatto/box2d.git > /dev/null

echo "--- CLONING ENTT ---"
git clone --branch v3.9.0 --depth 1 https://github.com/skypjack/entt.git > /dev/null

echo "--- CLONING RAPID_JSON ---"
git clone --branch v1.1.0 --depth 1 https://github.com/Tencent/rapidjson > /dev/null

echo "--- CLONING CONCURRENT_QUEUE ---"
git clone --branch v1.0.3 --depth 1 https://github.com/cameron314/concurrentqueue.git > /dev/null

echo "--- CLONING ASIO ---"
git clone --branch asio-1-18-1 --depth 1 https://github.com/chriskohlhoff/asio.git > /dev/null

echo "--- CLONING WEBSOCKET++ ---"
git clone --branch 0.8.2 --depth 1 https://github.com/zaphoyd/websocketpp.git > /dev/null

echo "--- CLONING CORRADE ---"
git clone --branch v2020.06 --depth 1 https://github.com/mosra/corrade.git > /dev/null

echo "--- CLONING MAGNUM ---"
git clone --branch v2020.06 --depth 1 https://github.com/mosra/magnum.git > /dev/null

echo "--- CLONING MAGNUM-INTEGRATION ---"
git clone --branch v2020.06 --depth 1 https://github.com/mosra/magnum-integration.git > /dev/null

echo "--- CLONING IMGUI ---"
git clone --branch v1.79 --depth 1 https://github.com/ocornut/imgui.git > /dev/null

# Install argagg

echo "--- INSTALLING ARGAGG ---"
cd argagg

# patch CMake version to avoid warning
sed -i "1c cmake_minimum_required(VERSION 3.1)" CMakeLists.txt > /dev/null

mkdir -p build
cd build
cmake .. -DCMAKE_INSTALL_PREFIX=../../../install -DARGAGG_BUILD_DOCS=OFF -DARGAGG_BUILD_EXAMPLES=OFF -DARGAGG_BUILD_TESTS=OFF -DCMAKE_BUILD_TYPE=RELEASE > /dev/null
make install > /dev/null
cd ../..

# Install libnoise2d

echo "--- INSTALLING LIBNOISE2D ---"
cd libnoise2d
mkdir -p build
cd build
cmake .. -DCMAKE_INSTALL_PREFIX=../../../install -DUSE_XXHASH=ON -DCMAKE_BUILD_TYPE=RELEASE > /dev/null
make -j8 install > /dev/null
cd ../..

# Install box2d

echo "--- INSTALLING BOX2D ---"
cd box2d
mkdir -p build
cd build
cmake .. -DCMAKE_INSTALL_PREFIX=../../../install -DBOX2D_BUILD_TESTBED=OFF -DBOX2D_BUILD_UNIT_TESTS=OFF -DCMAKE_BUILD_TYPE=RELEASE > /dev/null
make -j8 install > /dev/null
cd ../..

# Install entt

echo "--- INSTALLING ENTT ---"
cd entt
# build directory already exists
#mkdir -p build
cd build
cmake .. -DCMAKE_INSTALL_PREFIX=../../../install -DBUILD_TESTING=OFF -DCMAKE_BUILD_TYPE=RELEASE > /dev/null
make -j8 install > /dev/null
cd ../..

# Install rapidjson

echo "--- INSTALLING RAPID_JSON ---"
cd rapidjson

# patch CMake version to avoid warning
sed -i "1c cmake_minimum_required(VERSION 3.1)" CMakeLists.txt > /dev/null

mkdir -p build
cd build
cmake .. -DCMAKE_INSTALL_PREFIX=../../../install -DCMAKE_BUILD_TYPE=RELEASE -DRAPIDJSON_BUILD_DOC=OFF -DRAPIDJSON_BUILD_EXAMPLES=OFF -DRAPIDJSON_BUILD_TESTS=OFF > /dev/null
make -j8 install > /dev/null
cd ../..

# Install concurrent queue

echo "--- INSTALLING CONCURRENT_QUEUE ---"
cd concurrentqueue
# build already exists and conflicts with cmake config. Hence, build0
mkdir -p build0
cd build0
cmake .. -DCMAKE_INSTALL_PREFIX=../../../install -DCMAKE_BUILD_TYPE=RELEASE > /dev/null
make -j8 install > /dev/null
cd ../..

# Install asio
#   This is a little different, since asio standalone relies on autotools
echo "--- INSTALLING ASIO ---"
cd asio/asio
./autogen.sh > /dev/null
ASIO_INSTALL_PATH=$(pwd)/../../../install
./configure --prefix=$ASIO_INSTALL_PATH > /dev/null
make -j8 > /dev/null && make install > /dev/null
cd ../..


# Install websocketpp

echo "--- INSTALLING WEBSOCKET++ ---"
cd websocketpp

# patch CMake version to avoid warning
sed -i "5c cmake_minimum_required(VERSION 3.1)" CMakeLists.txt > /dev/null

mkdir -p build
cd build
cmake .. -DCMAKE_INSTALL_PREFIX=../../../install -DCMAKE_BUILD_TYPE=RELEASE > /dev/null
make -j8 install > /dev/null
cd ../..

# Install corrade

echo "--- INSTALLING CORRADE ---"
cd corrade
mkdir -p build
cd build
cmake .. -DCMAKE_PREFIX_PATH=../../../install -DCORRADE_BUILD_MULTITHREADED=ON -DCMAKE_INSTALL_PREFIX=../../../install -DCMAKE_BUILD_TYPE=RELEASE -DBUILD_DEPRECATED=OFF > /dev/null
make -j8 install > /dev/null
cd ../..

# Install magnum

echo "--- INSTALLING MAGNUM ---"
cd magnum
mkdir -p build
cd build
cmake .. -DCMAKE_PREFIX_PATH=../../../install -DCMAKE_INSTALL_PREFIX=../../../install -DCMAKE_BUILD_TYPE=RELEASE -DBUILD_DEPRECATED=OFF -DWITH_DEBUGTOOLS=ON -DWITH_GLFWAPPLICATION=ON -DWITH_SDL2APPLICATION=OFF > /dev/null
make -j8 install > /dev/null
cd ../..

cp magnum/modules/FindGLFW.cmake ../install/share/cmake/

# Install imgui

echo "--- INSTALLING IMGUI ---"
cd imgui
cp *.h ../../install/include/
cp *.cpp ../../install/include/
cd ..

# Install magnum-integration

echo "--- INSTALLING MAGNUM-INTEGRATION ---"
cd magnum-integration
mkdir -p build
cd build
cmake .. -DCMAKE_PREFIX_PATH=../../../install -DCMAKE_INSTALL_PREFIX=../../../install -DCMAKE_BUILD_TYPE=RELEASE -DWITH_IMGUI=ON -Dimgui_DIR=../../install > /dev/null
make -j8 install > /dev/null
cd ../..

# Add modules
echo "--- ADDING MODULES ---"
mkdir -p modules
cp magnum-integration/modules/* ../install/share/cmake/
cd ../..
